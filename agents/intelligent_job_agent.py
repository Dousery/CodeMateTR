#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Akƒ±llƒ± ƒ∞≈ü Bulma Asistanƒ± - Basit ve Etkili Versiyon
CV analizi + SerpAPI Google Jobs
"""

import os
import json
import time
import requests
from datetime import datetime
from typing import List, Dict, Any
import google.generativeai as genai
from google import genai as google_genai
from google.genai import types
from dotenv import load_dotenv

load_dotenv()

class IntelligentJobAgent:
    def __init__(self):
        # Gemini AI setup
        self.gemini_api_key = os.getenv('GEMINI_API_KEY')
        if not self.gemini_api_key:
            raise ValueError("GEMINI_API_KEY √ßevre deƒüi≈ükeni bulunamadƒ±")
        
        # SerpAPI setup
        self.serpapi_key = os.getenv('SERPAPI_KEY')
        
        # Gemini client setup
        genai.configure(api_key=self.gemini_api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        self.genai_client = google_genai.Client(api_key=self.gemini_api_key)
        
        print("‚úÖ IntelligentJobAgent ba≈ülatƒ±ldƒ±")
    
    def analyze_cv_from_pdf(self, pdf_bytes: bytes) -> Dict[str, Any]:
        """
        PDF'yi Gemini ile analiz eder ve JSON formatƒ±nda sonu√ß d√∂nd√ºr√ºr
        """
        print("ü§ñ CV analizi ba≈ülatƒ±lƒ±yor...")
        
        prompt = """
        Bu CV'yi analiz et ve a≈üaƒüƒ±daki JSON formatƒ±nda sonu√ß d√∂nd√ºr:
        
        {
            "ki≈üisel_bilgiler": {
                "ad_soyad": "CV'deki tam isim",
                "email": "CV'deki email",
                "telefon": "CV'deki telefon",
                "lokasyon": "CV'deki ≈üehir"
            },
            "deneyim_yƒ±lƒ±": 0,
            "teknik_beceriler": ["CV'deki teknik beceriler"],
            "yazƒ±lƒ±m_dilleri": ["CV'deki programlama dilleri"],
            "teknolojiler": ["CV'deki teknolojiler"],
            "eƒüitim": ["CV'deki eƒüitim bilgisi"],
            "deneyim_seviyesi": "entry|junior|mid|senior",
            "ana_uzmanlƒ±k_alanƒ±": "CV'deki ana alan",
            "uygun_i≈ü_alanlarƒ±": ["Uygun i≈ü alanlarƒ±"]
        }
        
        √ñnemli: Sadece JSON d√∂nd√ºr, ba≈üka a√ßƒ±klama ekleme. CV'de olmayan bilgileri "Belirtilmemi≈ü" yaz.
        """
        
        try:
            # Gemini PDF API kullan
            response = self.genai_client.models.generate_content(
                model="gemini-1.5-flash",
                contents=[
                    types.Part.from_bytes(
                        data=pdf_bytes,
                        mime_type='application/pdf',
                    ),
                    prompt
                ]
            )
            
            # JSON'u temizle ve parse et
            json_text = response.text.strip()
            if json_text.startswith('```json'):
                json_text = json_text[7:-3]
            elif json_text.startswith('```'):
                json_text = json_text[3:-3]
            
            cv_analysis = json.loads(json_text)
            
            # Eƒüer teknik beceriler bo≈üsa, varsayƒ±lan ekle
            if not cv_analysis.get('teknik_beceriler'):
                cv_analysis['teknik_beceriler'] = ['HTML', 'CSS', 'JavaScript']
            
            print(f"‚úÖ CV analizi tamamlandƒ±: {len(cv_analysis.get('teknik_beceriler', []))} beceri bulundu")
            return cv_analysis
            
        except Exception as e:
            print(f"‚ùå CV analizi hatasƒ±: {e}")
            # Hata durumunda varsayƒ±lan analiz
            return {
                "ki≈üisel_bilgiler": {
                    "ad_soyad": "Belirtilmemi≈ü",
                    "email": "Belirtilmemi≈ü",
                    "telefon": "Belirtilmemi≈ü",
                    "lokasyon": "Belirtilmemi≈ü"
                },
                "deneyim_yƒ±lƒ±": 0,
                "teknik_beceriler": ["HTML", "CSS", "JavaScript"],
                "yazƒ±lƒ±m_dilleri": ["JavaScript"],
                "teknolojiler": ["HTML", "CSS"],
                "eƒüitim": ["Belirtilmemi≈ü"],
                "deneyim_seviyesi": "entry",
                "ana_uzmanlƒ±k_alanƒ±": "Software Developer",
                "uygun_i≈ü_alanlarƒ±": ["Junior Developer", "Frontend Developer"]
            }
    
    def search_jobs_with_serpapi(self, cv_analysis: Dict[str, Any], max_results: int = 20) -> List[Dict[str, Any]]:
        """
        SerpAPI ile i≈ü ilanlarƒ± arar
        """
        if not self.serpapi_key:
            print("‚ö†Ô∏è SERPAPI_KEY bulunamadƒ±, varsayƒ±lan i≈üler d√∂nd√ºr√ºl√ºyor")
            return self._get_default_jobs()
        
        try:
            # CV'den arama terimleri olu≈ütur
            skills = cv_analysis.get('teknik_beceriler', [])
            job_areas = cv_analysis.get('uygun_i≈ü_alanlarƒ±', ['Software Developer'])
            location = cv_analysis.get('ki≈üisel_bilgiler', {}).get('lokasyon', 'T√ºrkiye')
            
            # Arama terimlerini birle≈ütir
            search_keywords = " ".join(skills[:3] + job_areas[:1])
            if not search_keywords:
                search_keywords = "Software Developer"
            
            print(f"üîç ƒ∞≈ü aranƒ±yor: '{search_keywords}' ({location})")
            
            # SerpAPI ile i≈ü ara
            params = {
                "api_key": self.serpapi_key,
                "engine": "google_jobs",
                "q": search_keywords,
                "location": location,
                "hl": "tr",
                "gl": "tr"
            }
            
            response = requests.get("https://serpapi.com/search", params=params)
            response.raise_for_status()
            data = response.json()
            
            jobs = data.get("jobs_results", [])
            
            # ƒ∞≈üleri formatla
            formatted_jobs = []
            for job in jobs[:max_results]:
                formatted_job = {
                    'id': job.get('job_id', f"job_{len(formatted_jobs)}"),
                    'title': job.get('title', 'ƒ∞≈ü ƒ∞lanƒ±'),
                    'company': job.get('company_name', '≈ûirket'),
                    'location': job.get('location', location),
                    'description': job.get('description', ''),
                    'requirements': job.get('job_highlights', {}).get('Qualifications', []),
                    'salary': job.get('salary', 'Belirtilmemi≈ü'),
                    'url': job.get('related_links', [{}])[0].get('link', 'https://google.com/jobs'),
                    'posted_date': job.get('posted_at', ''),
                    'source': 'Google Jobs'
                }
                formatted_jobs.append(formatted_job)
            
            print(f"‚úÖ {len(formatted_jobs)} i≈ü ilanƒ± bulundu")
            return formatted_jobs
            
        except Exception as e:
            print(f"‚ùå SerpAPI hatasƒ±: {e}")
            return self._get_default_jobs()
    
    def _get_default_jobs(self) -> List[Dict[str, Any]]:
        """
        Varsayƒ±lan i≈ü ilanlarƒ± d√∂nd√ºr√ºr
        """
        return [
            {
                'id': 'default_1',
                'title': 'Junior Software Developer',
                'company': 'Teknoloji ≈ûirketi',
                'location': 'ƒ∞stanbul, T√ºrkiye',
                'description': 'Yazƒ±lƒ±m geli≈ütirme ekibine katƒ±lacak junior developer aranmaktadƒ±r.',
                'requirements': ['Temel programlama bilgisi', 'Takƒ±m √ßalƒ±≈ümasƒ±'],
                'salary': '8.000 - 12.000 TL',
                'url': 'https://linkedin.com/jobs',
                'posted_date': datetime.now().strftime('%Y-%m-%d'),
                'source': 'Varsayƒ±lan'
            },
            {
                'id': 'default_2',
                'title': 'Frontend Developer',
                'company': 'Dijital Ajans',
                'location': 'ƒ∞stanbul, T√ºrkiye',
                'description': 'Modern web teknolojileri ile kullanƒ±cƒ± dostu aray√ºzler geli≈ütirecek developer aranmaktadƒ±r.',
                'requirements': ['HTML/CSS/JavaScript', 'React/Vue.js'],
                'salary': '10.000 - 15.000 TL',
                'url': 'https://linkedin.com/jobs',
                'posted_date': datetime.now().strftime('%Y-%m-%d'),
                'source': 'Varsayƒ±lan'
            },
            {
                'id': 'default_3',
                'title': 'Backend Developer',
                'company': 'Fintech Startup',
                'location': 'ƒ∞stanbul, T√ºrkiye',
                'description': '√ñl√ßeklenebilir backend sistemleri geli≈ütirecek developer aranmaktadƒ±r.',
                'requirements': ['Python/Java/Node.js', 'Veritabanƒ± y√∂netimi'],
                'salary': '12.000 - 18.000 TL',
                'url': 'https://linkedin.com/jobs',
                'posted_date': datetime.now().strftime('%Y-%m-%d'),
                'source': 'Varsayƒ±lan'
            }
        ]
    
    def process_cv_and_find_jobs(self, pdf_bytes: bytes, max_results: int = 20) -> Dict[str, Any]:
        """
        Ana fonksiyon: CV analizi + i≈ü arama
        """
        try:
            # 1. CV Analizi
            cv_analysis = self.analyze_cv_from_pdf(pdf_bytes)
            
            # 2. ƒ∞≈ü Arama
            jobs = self.search_jobs_with_serpapi(cv_analysis, max_results)
            
            return {
                'success': True,
                'cv_analysis': cv_analysis,
                'jobs': jobs,
                'stats': {
                    'total_jobs': len(jobs),
                    'search_method': 'SerpAPI' if self.serpapi_key else 'Varsayƒ±lan'
                }
            }
            
        except Exception as e:
            print(f"‚ùå ƒ∞≈ülem hatasƒ±: {e}")
            return {
                'success': False,
                'error': str(e),
                'cv_analysis': {},
                'jobs': [],
                'stats': {}
            }
